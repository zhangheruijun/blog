import{_ as a,c as n,o as l,a as e}from"./app.6f306bdd.js";const p="/docs/assets/ro.f0798712.jpg",s="/docs/assets/xy.180b1a92.jpg",o="/docs/assets/r.d58e23bd.jpg";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"1.先执行旋转，再执行平移","slug":"_1-先执行旋转-再执行平移","link":"#_1-先执行旋转-再执行平移","children":[]},{"level":3,"title":"1.先执行平移，再执行旋转","slug":"_1-先执行平移-再执行旋转","link":"#_1-先执行平移-再执行旋转","children":[]}],"relativePath":"htmlcss/杂项/transform执行顺序问题.md","lastUpdated":1692755306000}'),r={name:"htmlcss/杂项/transform执行顺序问题.md"},t=e(`<p>在transform变化中，是矩阵变化，执行顺序是从后往前执行</p><h3 id="_1-先执行旋转-再执行平移" tabindex="-1">1.先执行旋转，再执行平移 <a class="header-anchor" href="#_1-先执行旋转-再执行平移" aria-hidden="true">#</a></h3><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#6A9955;">/* 先执行旋转，再执行X、y轴平移 */</span></span>
<span class="line"><span style="color:#D7BA7D;">.a</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">transform</span><span style="color:#D4D4D4;">: </span><span style="color:#DCDCAA;">translate</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100px</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">100px</span><span style="color:#D4D4D4;">) </span><span style="color:#DCDCAA;">rotate</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">45deg</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="wraph"><img src="`+p+'" class="imgh"><img src="'+s+`" class="imgh"></div><h3 id="_1-先执行平移-再执行旋转" tabindex="-1">1.先执行平移，再执行旋转 <a class="header-anchor" href="#_1-先执行平移-再执行旋转" aria-hidden="true">#</a></h3><p>旋转是以坐标圆点为中心</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#6A9955;">/* 先执行X、y轴平移，再执行旋转 */</span></span>
<span class="line"><span style="color:#D7BA7D;">.a</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">transform</span><span style="color:#D4D4D4;">: </span><span style="color:#DCDCAA;">rotate</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">45deg</span><span style="color:#D4D4D4;">) </span><span style="color:#DCDCAA;">translate</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100px</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">100px</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="wraph"><img src="`+s+'" class="imgh"><img src="'+o+'" class="imgh"></div>',8),c=[t];function i(D,d,_,m,y,u){return l(),n("div",null,c)}const C=a(r,[["render",i]]);export{b as __pageData,C as default};
