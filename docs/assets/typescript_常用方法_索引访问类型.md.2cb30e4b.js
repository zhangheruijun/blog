import{_ as s,c as n,o as a,a as p}from"./app.6f306bdd.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/常用方法/索引访问类型.md","lastUpdated":1688639464000}'),l={name:"typescript/常用方法/索引访问类型.md"},e=p(`<p>我们可以使用索引访问类型在另一种类型上查找特定属性：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">alive</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Age</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">]; </span><span style="color:#6A9955;">// type Age = number</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>索引类型本身就是一个类型，因此我们可以完全使用联合、 或其他类型的类型：<code>keyof</code></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">alive</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">I1</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;name&quot;</span><span style="color:#D4D4D4;">]; </span><span style="color:#6A9955;">// type I1 = string | number</span></span>
<span class="line"><span style="color:#D4D4D4;">     </span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">I2</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">[</span><span style="color:#569CD6;">keyof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">]; </span><span style="color:#6A9955;">// type I2 = string | number | boolean</span></span>
<span class="line"><span style="color:#D4D4D4;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">AliveOrName</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;alive&quot;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&quot;name&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">I3</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">AliveOrName</span><span style="color:#D4D4D4;">];  </span><span style="color:#6A9955;">// type I3 = string | boolean</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>使用任意类型进行索引的另一个示例是用于获取数组元素的类型。 我们可以将其与 方便地捕获数组文字的元素类型</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">MyArray</span><span style="color:#D4D4D4;"> = [</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">name:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Alice&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">name:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Bob&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">23</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">  { </span><span style="color:#9CDCFE;">name:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Eve&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">38</span><span style="color:#D4D4D4;"> },</span></span>
<span class="line"><span style="color:#D4D4D4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">MyArray</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">number</span><span style="color:#D4D4D4;">]; </span></span>
<span class="line"><span style="color:#6A9955;">// type Person = {</span></span>
<span class="line"><span style="color:#6A9955;">//     name: string;</span></span>
<span class="line"><span style="color:#6A9955;">//     age: number;</span></span>
<span class="line"><span style="color:#6A9955;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Age</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">typeof</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">MyArray</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">number</span><span style="color:#D4D4D4;">][</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">]; </span><span style="color:#6A9955;">// type Age = number</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Age2</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">]; </span><span style="color:#6A9955;">// type Age2 = number</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>只能在索引时使用类型，这意味着不能使用 进行变量引用：const</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// key不能是变量,只能是类型</span></span>
<span class="line"><span style="color:#6A9955;">// const key = &quot;age&quot;; // error</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">key</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;age&quot;</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// ok</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Age</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">key</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,8),o=[e];function r(t,c,D,y,i,C){return a(),n("div",null,o)}const m=s(l,[["render",r]]);export{u as __pageData,m as default};
