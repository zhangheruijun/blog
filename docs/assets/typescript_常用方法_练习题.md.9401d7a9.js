import{_ as s,c as n,o as a,a as l}from"./app.6f306bdd.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"1.实现一个UnionToInter工具类型，用于把联合类型转换为交叉类型","slug":"_1-实现一个uniontointer工具类型-用于把联合类型转换为交叉类型","link":"#_1-实现一个uniontointer工具类型-用于把联合类型转换为交叉类型","children":[]},{"level":3,"title":"2.实现一个OptionalKeys工具类型，用来获取对象类型中声明的可选属性","slug":"_2-实现一个optionalkeys工具类型-用来获取对象类型中声明的可选属性","link":"#_2-实现一个optionalkeys工具类型-用来获取对象类型中声明的可选属性","children":[]},{"level":3,"title":"3.实现一个Remove工具类型，用于移除已有类型中的索引签名","slug":"_3-实现一个remove工具类型-用于移除已有类型中的索引签名","link":"#_3-实现一个remove工具类型-用于移除已有类型中的索引签名","children":[]},{"level":2,"title":"练习题参考","slug":"练习题参考","link":"#练习题参考","children":[]}],"relativePath":"typescript/常用方法/练习题.md","lastUpdated":1716544854000}'),p={name:"typescript/常用方法/练习题.md"},e=l(`<h3 id="_1-实现一个uniontointer工具类型-用于把联合类型转换为交叉类型" tabindex="-1">1.实现一个UnionToInter工具类型，用于把联合类型转换为交叉类型 <a class="header-anchor" href="#_1-实现一个uniontointer工具类型-用于把联合类型转换为交叉类型" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">UnionToInter</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Union</span><span style="color:#D4D4D4;">&gt; = (</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4EC9B0;">Union</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">unknown</span><span style="color:#D4D4D4;"> ? (</span><span style="color:#9CDCFE;">params1</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Union</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">never</span></span>
<span class="line"><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">params2</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">infer</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span></span>
<span class="line"><span style="color:#D4D4D4;">  ? </span><span style="color:#4EC9B0;">K</span></span>
<span class="line"><span style="color:#D4D4D4;">  : </span><span style="color:#4EC9B0;">never</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 测试用例</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">U0</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">UnionToInter</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#6A9955;">// never</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">U1</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">UnionToInter</span><span style="color:#D4D4D4;">&lt;{ </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> } | { </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }&gt; </span><span style="color:#6A9955;">// { name: string; } &amp; { age: number }  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>拆解上面的操作</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// 第一步</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Us</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Union</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#4EC9B0;">Union</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">unknown</span><span style="color:#D4D4D4;"> ? (</span><span style="color:#9CDCFE;">params1</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Union</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">never</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Y1</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Us</span><span style="color:#D4D4D4;">&lt;{ </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> } | { </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> }&gt;</span></span>
<span class="line"><span style="color:#6A9955;">// type Y1 = ((params1: { name: string }) =&gt; void) | ((params1: { age: number }) =&gt; void)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 第二步</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">UnionToInter</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Y1</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">params2</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">infer</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;"> ? </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">never</span></span>
<span class="line"><span style="color:#6A9955;">// type UnionToInter = { name: string } &amp; { age: number }  </span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_2-实现一个optionalkeys工具类型-用来获取对象类型中声明的可选属性" tabindex="-1">2.实现一个OptionalKeys工具类型，用来获取对象类型中声明的可选属性 <a class="header-anchor" href="#_2-实现一个optionalkeys工具类型-用来获取对象类型中声明的可选属性" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">never</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">A1</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&#39;id&#39;</span><span style="color:#D4D4D4;">] </span><span style="color:#6A9955;">// never</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">A2</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&#39;from&#39;</span><span style="color:#D4D4D4;">] </span><span style="color:#6A9955;">// string | undefined</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面例子中,id为never类型,获取的值就是不存在的never,对于form可选属性得值要加上<code>undefined</code>,所以:<code>from:string | undefined</code></p><p>实现一个OptionalKeys工具类型，用来获取对象类型中声明的可选属性</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">from</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">speak</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">PersonOptionalKeys</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">OptionalKeys</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Person</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#6A9955;">// &quot;from&quot; | &quot;speak&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">OptionalKeys</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  [</span><span style="color:#4EC9B0;">P</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">keyof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">]-?: </span><span style="color:#4EC9B0;">undefined</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">P</span><span style="color:#D4D4D4;">] ? </span><span style="color:#4EC9B0;">P</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">never</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}[</span><span style="color:#569CD6;">keyof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 解析1：可选属性后面默认会加一个undefined</span></span>
<span class="line"><span style="color:#6A9955;">// type Person = {</span></span>
<span class="line"><span style="color:#6A9955;">//   id: string;</span></span>
<span class="line"><span style="color:#6A9955;">//   name: string;</span></span>
<span class="line"><span style="color:#6A9955;">//   age: number;</span></span>
<span class="line"><span style="color:#6A9955;">//   from?: string | undefined;</span></span>
<span class="line"><span style="color:#6A9955;">//   speak?: string | undefined;</span></span>
<span class="line"><span style="color:#6A9955;">// };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 解析2: 添加可选属性,其值会默认加上undefined</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Ce</span><span style="color:#D4D4D4;"> = {</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Csd</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  [</span><span style="color:#4EC9B0;">P</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">keyof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Ce</span><span style="color:#D4D4D4;">]?: </span><span style="color:#4EC9B0;">P</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#6A9955;">// type Csd = {</span></span>
<span class="line"><span style="color:#6A9955;">//     name?: &quot;name&quot; | undefined;</span></span>
<span class="line"><span style="color:#6A9955;">// }</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><p>1、首先会遍历所有Person属性，-?字符的作用是，再完成边extends判断后将T中所有的属性都变成必须属性，为防止属性值类型undefined；</p><p>2、右边，判断undefined是否约束于当前键值，如果满足约束当前属性的类型为键名。在 TypeScript 中，如果添加了可选属性，会被隐式添加一个 undefined类型，比如from?其实是 string | undefined </p><p>3、{ ... } [ keyof T ] 取键值，因为id,age,name的属性类型都为never，取值的时候会被忽略掉，因为never是一个用不存在的类型，因此就只剩下from、speak属性的值了就是 &quot;from&quot; | &quot;speak&quot;组成联合类型返回。 </p><h3 id="_3-实现一个remove工具类型-用于移除已有类型中的索引签名" tabindex="-1">3.实现一个Remove工具类型，用于移除已有类型中的索引签名 <a class="header-anchor" href="#_3-实现一个remove工具类型-用于移除已有类型中的索引签名" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Foo</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"><span style="color:#D4D4D4;">  [</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">]: </span><span style="color:#4EC9B0;">any</span></span>
<span class="line"><span style="color:#D4D4D4;">  [</span><span style="color:#9CDCFE;">key</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">]: </span><span style="color:#4EC9B0;">any</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 移除 [key: string] 、[key: number]</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Remove</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = {</span></span>
<span class="line"><span style="color:#D4D4D4;">  [</span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">in</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">keyof</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">as</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;"> ? </span><span style="color:#4EC9B0;">never</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;"> ? </span><span style="color:#4EC9B0;">never</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">]: </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">[</span><span style="color:#4EC9B0;">K</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 测试用例</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">FooWith</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">Remove</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Foo</span><span style="color:#D4D4D4;">&gt; </span><span style="color:#6A9955;">// type FooWith = { name: string}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>1、遍历<code>T</code>，利用<code>as</code>断言实现对<code>K</code>的判断过滤；</p><p>2、当前的<code>key</code>如果满足<code>string | number</code>直接返回<code>never</code>过滤当前属性</p><p>3、否则拿当前<code>K</code>，当前<code>K</code>值类型为<code>T[K]</code></p><h2 id="练习题参考" tabindex="-1">练习题参考 <a class="header-anchor" href="#练习题参考" aria-hidden="true">#</a></h2><ul><li><a href="https://blog.csdn.net/weixin_42164539/article/details/123778285" target="_blank" rel="noreferrer">csdn中ts练习</a></li><li><a href="https://github.com/type-challenges/type-challenges/blob/main/README.zh-CN.md" target="_blank" rel="noreferrer">github中ts练习</a></li></ul>`,19),o=[e];function r(c,t,D,y,i,C){return a(),n("div",null,o)}const u=s(p,[["render",r]]);export{d as __pageData,u as default};
