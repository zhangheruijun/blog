import{_ as s,c as n,o as l,a as e}from"./app.47e3cb81.js";const a="/docs/assets/NonNullable1.f541d1bb.png";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"NonNullable<Type>","slug":"nonnullable-type","link":"#nonnullable-type","children":[]}],"relativePath":"typescript/内置公共类型/NonNullable.md","lastUpdated":1687339744000}'),t={name:"typescript/内置公共类型/NonNullable.md"},o=e('<h3 id="nonnullable-type" tabindex="-1">NonNullable&lt;Type&gt; <a class="header-anchor" href="#nonnullable-type" aria-hidden="true">#</a></h3><div class="s1">通过从 Type 中排除 null 和 undefined 来构造一个类型。</div><img src="'+a+`" style="height:400px;"><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// 实现的方式</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">NonNullable</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">null</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">undefined</span><span style="color:#D4D4D4;"> ? </span><span style="color:#4EC9B0;">never</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,4),p=[o];function r(c,i,d,_,y,u){return l(),n("div",null,p)}const N=s(t,[["render",r]]);export{b as __pageData,N as default};
