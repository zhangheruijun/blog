import{_ as s,c as n,o as l,a}from"./app.95841843.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[{"level":3,"title":"主要用途","slug":"主要用途","link":"#主要用途","children":[]},{"level":3,"title":"其他用途","slug":"其他用途","link":"#其他用途","children":[]},{"level":3,"title":"常见问题与注意事项","slug":"常见问题与注意事项","link":"#常见问题与注意事项","children":[]}],"relativePath":"git/worktree应用/基本用法.md","lastUpdated":1737081387000}'),e={name:"git/worktree应用/基本用法.md"},p=a(`<p>git worktree 是 Git 的一个强大功能，它允许在同一个 Git 仓库中创建多个独立的工作区。</p><h3 id="主要用途" tabindex="-1">主要用途 <a class="header-anchor" href="#主要用途" aria-hidden="true">#</a></h3><ul><li><ol><li><strong>同时开发多个分支</strong></li></ol></li></ul><p>git worktree 的最典型用途是让开发者可以同时处理多个分支，而无需频繁切换 </p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// 添加一个新的工作目录，并检出指定分支</span></span>
<span class="line"><span style="color:#9CDCFE;">git</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">worktree</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">add</span><span style="color:#D4D4D4;"> &lt;</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">&gt; [</span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">branch</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">// 列出所有的工作目录</span></span>
<span class="line"><span style="color:#D4D4D4;">git worktree list</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">// 移除一个工作目录（必须先确保该目录没有未提交的更改）</span></span>
<span class="line"><span style="color:#D4D4D4;">git worktree remove </span><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">path</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">// 移动一个工作目录到新的位置</span></span>
<span class="line"><span style="color:#D4D4D4;">git worktree move </span><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">current-path</span><span style="color:#808080;">&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#808080;">&lt;</span><span style="color:#4EC9B0;">new-path</span><span style="color:#808080;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><strong>场景：</strong></li></ul><p style="padding-left:2em;">你正在开发一个新功能，但突然需要切换到主分支修复生产问题。如果使用传统的方式，切换分支可能需要先保存工作区的更改（如 stash），然后检出主分支。使用 git worktree，你可以直接为主分支创建一个独立的工作区，方便快捷</p><ul><li><strong>命令：</strong></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">git worktree add ../fix-production main</span></span>
<span class="line"><span style="color:#D4D4D4;">cd ../fix-production</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="其他用途" tabindex="-1">其他用途 <a class="header-anchor" href="#其他用途" aria-hidden="true">#</a></h3><ul><li><ol><li><strong>在进行代码审查时，可以将需要审查的分支检出到一个单独的工作区，而不影响当前开发环境。</strong></li></ol></li><li><ol start="2"><li><strong>可以帮助你快速创建一个临时环境用于测试或实验，而不污染主开发环境。</strong></li></ol></li><li><ol start="3"><li><strong>当合并分支时遇到冲突，可以将冲突的两个分支分别检出到不同的工作区中，以便更方便地查看和解决冲突。</strong></li></ol></li><li><ol start="4"><li><strong>在需要支持多个版本的软件开发中，可以使用 git worktree 创建多个独立工作区来管理不同版本的分支。比如:你需要维护一个旧版本分支 release-v1.0，同时开发新版本分支 main。</strong></li></ol></li></ul><h3 id="常见问题与注意事项" tabindex="-1">常见问题与注意事项 <a class="header-anchor" href="#常见问题与注意事项" aria-hidden="true">#</a></h3><ul><li><ol><li><strong>不能同时检出同一个分支</strong></li></ol></li></ul><p> 一个分支不能同时被多个工作区检出。如果需要，可以创建一个新的分支来进行操作</p><ul><li><ol start="2"><li><strong>删除工作区后需清理记录</strong></li></ol></li></ul><p> 删除工作区后，可能会残留无效的工作区记录。可以使用以下命令清理：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">git</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">worktree</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">prune</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><ol start="3"><li><strong>未跟踪文件</strong></li></ol></li></ul><p> <code>git worktree</code> 不会自动复制未跟踪的文件到新工作区。</p><ul><li><ol start="4"><li><strong>同步注意</strong></li></ol></li></ul><p> 各工作区间的分支修改需要通过 <code>commit</code> 或 <code>push/pull</code> 来同步。</p>`,21),r=[p];function t(o,i,c,d,u,D){return l(),n("div",null,r)}const y=s(e,[["render",t]]);export{b as __pageData,y as default};
