import{_ as s,c as n,o as a,a as p}from"./app.5b8334ac.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"typescript/常用方法/函数重载.md","lastUpdated":1745828310000}'),l={name:"typescript/常用方法/函数重载.md"},o=p(`<p>在 TypeScript 中，我们可以通过编写重载签名来指定可以以不同方式调用的函数。为此，请编写一定数量的函数签名（通常是两个或更多），然后是函数体</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki dark-plus" tabindex="0"><code><span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * 获取验证码,当参数是字符串时</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;">  </span><span style="color:#9CDCFE;">phoneAndFun</span><span style="color:#6A9955;"> 字符串 \`电话号码\`</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;">  </span><span style="color:#9CDCFE;">verfiyCallback</span><span style="color:#6A9955;"> 发送短信验证码的函数 \`不传默认是登录验证函数\`</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@returns</span><span style="color:#6A9955;"> isStop、codeText、phoneNumber、getAuthCode</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">useVerifyCode</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">phoneAndFun</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span><span style="color:#DCDCAA;">verfiyCallback</span><span style="color:#D4D4D4;">?: (...</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;">):</span><span style="color:#4EC9B0;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * 获取验证码,当参数是未传入</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;">  </span><span style="color:#9CDCFE;">phoneAndFun</span><span style="color:#6A9955;"> 未传入或者时,会自动去获取手机号</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;">  </span><span style="color:#9CDCFE;">verfiyCallback</span><span style="color:#6A9955;"> 发送短信验证码的函数 \`不传默认是登录验证函数\`</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@returns</span><span style="color:#6A9955;"> isStop、codeText、phoneNumber、getAuthCode</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">useVerifyCode</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">phoneAndFun</span><span style="color:#D4D4D4;">?:</span><span style="color:#4EC9B0;">undefined</span><span style="color:#D4D4D4;">,</span><span style="color:#DCDCAA;">verfiyCallback</span><span style="color:#D4D4D4;">?: (...</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">string</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> </span><span style="color:#DCDCAA;">useVerifyCode</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">phoneAndFun</span><span style="color:#D4D4D4;">?: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">verfiyCallback</span><span style="color:#D4D4D4;">?: (...</span><span style="color:#9CDCFE;">arg</span><span style="color:#D4D4D4;">:</span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span></span>
<span class="line"><span style="color:#D4D4D4;">  ):</span><span style="color:#4EC9B0;">VerifyCode</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// 函数的实现........</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#6A9955;">// .................</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;字符串&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">d1</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useVerifyCode</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;12345678&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">d2</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useVerifyCode</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 函数重载一般用function去调用, 不用const f = () =&gt; void 这种 ☆☆☆☆☆</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>在此示例中，我们编写了两个重载, 前两个签名称为重载签名。</p><p>然后，我们编写了一个具有兼容签名的函数实现。函数有一个实现签名，但不能直接调用该签名。即使我们在必需的参数之后编写了一个带有两个可选参数的函数，但不能用两个参数来调用它！</p>`,4),e=[o];function r(c,t,D,y,i,C){return a(),n("div",null,e)}const A=s(l,[["render",r]]);export{u as __pageData,A as default};
